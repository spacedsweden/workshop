openapi: 3.0.0
info:
  description: "# Sending Messages\n\nTo start sending messages you need to have a Conversation API [**app**](https://dashboard.sinch.com/convapi/apps).\nThe app holds information about the channel credentials and registered webhooks\nto which the API delivers callbacks such as message delivery reports and contact messages.\nIf you don't already have an app please follow the instructions in the getting started\nguide available in the [Sinch Portal](https://dashboard.sinch.com/convapi/getting-started)\nto create one.\n\nThe next step is to create an Access Key under the Settings tab and note down the provided\nKey ID and Key Secret in a secure location. Also make sure to remember the Project ID\nsince your app will be associated to one Project ID.\n\nThe Key ID and the Key Secret are then used in the following way to obtain a valid OAuth2 Access Token\nthat will be used to authenticate towards the Conversation API in the US region.\n```console\ncurl https://us.auth.sinch.com/oauth2/token -d grant_type=client_credentials --user <KEY-ID>:<KEY-SECRET>\n```\n\nThe obtained Access Token can then be used to send a message via the Conversation API in US in the\nfollowing way, where {} should be replaced with a valid JSON object. Examples of valid JSON objects\ncan be found in the following sections.\n```console\ncurl https://us.conversation.api.sinch.com/v1/projects/<PROJECT-ID>/messages:send -H \"Authorization: Bearer <ACCESS-TOKEN>\" -d '{}'\n```\n\nPlease note that the above example only shows how to obtain a valid Access Token for the Conversation API in the US region.\nThe region names `us` must be changed to `eu` in both places above to send a message via the Conversation API in the EU region.\n\nThe examples that follow use the `ACCESS-TOKEN` obtained by the former call above, the `PROJECT-ID`,\nand the `APP-ID` obtained when creating the App. There are two different ways to specify\nthe recipient of the message when calling the `send message` endpoint:\n\n## Using Contact ID Recipient\n\nIn order to send messages using a reference to a contact the contact needs to be created first.\nThis is done by making a POST request to the `create contact` endpoint using Bearer authentication with\n`ACCESS_TOKEN` as access token. For example the below body\n creates a contact with its SMS channel identity being a Swedish telephone number:  \n\n```json\n{\n    \"channel_identities\": [\n        {\n            \"channel\": \"SMS\",\n            \"identity\": \"+46 xxx xxx xxx\"\n        }\n    ]\n}\n```\n\nThe `create contact` endpoint response contains the contact ID among auxiliary information\nabout the created contact:\n\n```json\n{\n    \"id\": \"01E4R9F5QWX1KR05YF31N4161J\",\n    ...\n}\n```\n\nAssuming the `APP-ID` app has been configured with Sinch SMS channel integration sending a\nmessage to the above contact consists of making a POST request to the `send message` endpoint using Bearer authentication with\n`ACCESS-TOKEN` as access token and the following body:\n\n```json\n{\n    \"app_id\": \"APP-ID\",\n    \"recipient\": {\n    \t\"contact_id\": \"01E4R9F5QWX1KR05YF31N4161J\"\n    },\n    \"message\": {\n        \"text_message\": {\n            \"text\": \"Text message from Sinch Conversation API.\"\n        }\n    }\n}\n```\n\nA successful 200 response from the API indicated the message was successfully queued\nfor delivery. The response body contain message id which will be used\nin subsequent delivery receipts:\n\n```json\n{\n    \"message_id\": \"01E4RAQSMVQY2M11G26SAE1ZM3\",\n    \"accepted_time\": \"2020-03-31T12:58:24.283289Z\"\n}\n```\n\n## Using Channel Recipient Identities to Identify the Recipient\n\nIt is possible to send messages without creating the contact first.\nFor example, the same message as before can be dispatched by\nchanging the body to the `send message` request to:\n\n```json\n{\n    \"app_id\": \"APP-ID\",\n    \"recipient\": {\n    \t\"identified_by\": {\n    \t\t\"channel_identities\":\t[{\n    \t\t\"channel\": \"SMS\",\n    \t\t\"identity\": \"+46 xxx xxx xxx\"\n    \t}]}\n    },\n    \"message\": {\n        \"text_message\": {\n            \"text\": \"Text message from Sinch Conversation API.\"\n        }\n    }\n}\n```\n\nIn this case the contact will be created automatically with the\ngiven channel identity while the message is processed by the\nConversation API. The contact ID can then be retrieved from the\nconversation reference returned by the message delivery report.   \n"
  title: Conversation API
  version: 7dfdfbac
  contact:
    email: support@sinch.com
    name: support at sinch
paths:
  /v1/projects/{project_id}/apps:
    parameters:
        - $ref: '#/components/parameters/project_id'
    get:
      tags:
        - App
      summary: List all apps for a given project
      operationId: App_ListApps
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ListAppsResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
    post:
      tags:
        - App
      summary: Creates an app
      operationId: App_CreateApp
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/typeApp"
        description: Required. The app to create.
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeApp"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  /v1/projects/{project_id}/apps/{app_id}:
    parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/app_id'
    get:
      tags:
        - App
      summary: Get an app
      operationId: App_GetApp
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeApp"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
    delete:
      tags:
        - App
      summary: Delete an app
      operationId: App_DeleteApp
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
    patch:
      tags:
        - App
      summary: Update an app
      operationId: App_UpdateApp
      parameters:
        - description: The set of field mask paths.
          name: update_mask.paths
          in: query
          explode: true
          schema:
            type: array
            items:
              type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/typeApp"
        description: Required. The updated app.
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeApp"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"  
  /v1/projects/{project_id}/apps/{app_id}/webhooks:
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/app_id'
    get:
      tags:
        - Webhooks
      summary: List all webhooks for a given app
      operationId: Webhooks_ListWebhooks
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ListWebhooksResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  /v1/projects/{project_id}/capability:query:
    parameters:
      - $ref: '#/components/parameters/project_id'
    post:
      description: |-
        This method is asynchronous - it returns immediately the
        requested Capability registration.
        Capability check are then delivered as callbacks
        to registered webhooks with trigger CAPABILITY for every reachable channel.
      tags:
        - Capability
      summary: Request a capability lookup. The outcome will be reported asynchronously.
      operationId: Capability_QueryCapability
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v1QueryCapabilityRequest"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1QueryCapabilityResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  /v1/projects/{project_id}/contacts:
    parameters:
      - $ref: '#/components/parameters/project_id'
    get:
      tags:
        - Contact
      summary: Get contacts
      operationId: Contact_ListContacts
      parameters:
        - description: |-
            Optional. The maximum number of contacts to fetch. The default is 10
            and the maximum is 20.
          name: page_size
          in: query
          schema:
            type: integer
            format: int32
        - description: Optional. Next page token previously returned if any.
          name: page_token
          in: query
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ListContactsResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
    post:
      tags:
        - Contact
      summary: Create a Contact
      operationId: Contact_CreateContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/typeContact"
        description: Required. The contact to be added.
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeContact"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  /v1/projects/{project_id}/contacts/{contact_id}:
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/contact_id'
    get:
      tags:
        - Contact
      summary: Get a Contact
      operationId: Contact_GetContact
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeContact"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
    delete:
      tags:
        - Contact
      summary: Delete a Contact
      operationId: Contact_DeleteContact
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
    patch:
      tags:
        - Contact
      summary: Update a Contact
      operationId: Contact_UpdateContact
      parameters:
        - description: The set of field mask paths.
          name: update_mask.paths
          in: query
          explode: true
          schema:
            type: array
            items:
              type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/typeContact"
        description: Required. The updated contact.
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeContact"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  /v1/projects/{project_id}/contacts/{destination_id}:merge:
    parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/destination_id'
    post:
      description: |-
        The remaining contact will contain all conversations that the removed
        contact did. If both contacts had conversations within the same App,
        messages from the removed contact will be merged into corresponding active
        conversations in the destination contact. Channel
        identities will be moved from the source contact to the destination contact
        only for channels that weren't present there before. Moved channel
        identities will be placed at the bottom of the channel priority list.
        Optional fields from the source contact will be copied only if
        corresponding fields in the destination contact are empty The contact being
        removed cannot be referenced after this call.
      tags:
        - Contact
      summary: Merge two contacts
      operationId: Contact_MergeContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v1MergeContactRequest"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeContact"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  /v1/projects/{project_id}/conversations:
    parameters:
        - $ref: '#/components/parameters/project_id'
    get:
      description: This operation lists all conversations that are associated with an app and/or a contact.
      tags:
        - Conversation
      summary: List conversations
      operationId: Conversation_ListConversations
      parameters:
        - description: |-
            Optional. The ID of the app involved in the conversations.
            At least one of app_id and contact_id needs to be present.
          name: app_id
          in: query
          schema:
            type: string
        - description: |-
            Optional. The ID of the contact involved in the conversations.
            At least one of app_id and contact_id needs to be present.
          name: contact_id
          in: query
          schema:
            type: string
        - description: Required. True if only active conversations should be listed.
          name: only_active
          in: query
          schema:
            type: boolean
          required: true
        - description: |-
            Optional. The maximum number of conversations to fetch. Defaults to 10
            and the maximum is 20.
          name: page_size
          in: query
          schema:
            type: integer
            format: int32
        - description: Optional. Next page token previously returned if any.
          name: page_token
          in: query
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ListConversationsResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
    post:
      description: |-
        Creates a new empty conversation. It is generally not needed to create
        a conversation explicitly since sending or receiving a message
        automatically creates a new conversation if it does not already
        exist between the given app and contact.
        Creating empty conversation is useful if the metadata of the conversation
        should be populated when the first message in the conversation is a contact message
        or the first message in the conversation comes out-of-band and
        needs to be injected with InjectMessage endpoint.
      tags:
        - Conversation
      summary: Creates a conversation
      operationId: Conversation_CreateConversation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/typeConversation"
        description: |-
          Required. The conversation to create. ID will be generated for the conversation
          and any ID in the given conversation will be ignored.
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeConversation"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  /v1/projects/{project_id}/conversations/{conversation_id}:
    parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/conversation_id'
    get:
      description: |-
        Retrieves a conversation by id. A conversation has two participating
        entities, an app and a contact.
      tags:
        - Conversation
      summary: Get a conversation
      operationId: Conversation_GetConversation
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeConversation"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
    delete:
      description: Deletes a conversation together with all the messages sent as part of the conversation.
      tags:
        - Conversation
      summary: Deletes a conversation
      operationId: Conversation_DeleteConversation
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
    patch:
      description: |-
        This operation updates a conversation which can, for instance, be used to
        update the metadata associated with a conversation.
      tags:
        - Conversation
      summary: Update a conversation
      operationId: Conversation_UpdateConversation
      parameters:
        - description: The set of field mask paths.
          name: update_mask.paths
          in: query
          explode: true
          schema:
            type: array
            items:
              type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/typeConversation"
        description: Required. The updated conversation.
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeConversation"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  /v1/projects/{project_id}/conversations/{conversation_id}:stop:
    parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/conversation_id'
    post:
      description: |-
        This operation stops the referenced conversation, if the conversation is still active.
        A new conversation will be created if a new message is exchanged between the app or contact
        that was part of the stopped conversation.
      tags:
        - Conversation
      summary: Stop conversation
      operationId: Conversation_StopActiveConversation
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  ? "/v1/projects/{project_id}/conversations/{message.conversation_id}:inject-message"
  : post:
      description: This operation injects a conversation message in to a specific conversation.
      tags:
        - Conversation
      summary: Inject messages
      operationId: Conversation_InjectMessage
      parameters:
        - description: Required. The project ID.
          name: project_id
          in: path
          required: true
          schema:
            type: string
        - description: Required. The ID of the conversation.
          name: message.conversation_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/typeConversationMessage"
        description: Message to be injected. Id field of the message is ignored and instead generated on the server.
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  /v1/projects/{project_id}/events:send:
    parameters:
        - $ref: '#/components/parameters/project_id'
    post:
      description: |-
        Sends an event to the referenced contact from the referenced app.
        Note that this operation enqueues the event in a queues so a successful
        response only indicates that the event has been queued.
      tags:
        - Events
      summary: Send an event
      operationId: Events_SendEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v1SendEventRequest"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1SendEventResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  "/v1/projects/{project_id}/messages":
    parameters:
        - $ref: '#/components/parameters/project_id'
        - description: |-
            Optional. Resource name (id) of the conversation.
            One of conversation_id or contact_id needs to be present.
          name: conversation_id
          in: query
          schema:
            type: string
        - description: |-
            Optional. Resource name (id) of the contact.
            One of conversation_id or contact_id needs to be present.
          name: contact_id
          in: query
          schema:
            type: string
        - description: |-
            Optional. Maximum number of messages to fetch. Defaults to 10
            and the maximum is 20.
          name: page_size
          in: query
          schema:
            type: integer
            format: int32
        - description: Optional. Next page token previously returned if any.
          name: page_token
          in: query
          schema:
            type: string
        - name: view
          in: query
          schema:
            type: string
            enum:
              - WITH_METADATA
              - WITHOUT_METADATA
            default: WITH_METADATA
    get:
      description: |-
        This operation lists all messages associated with a conversation or a contact.
        The messages are ordered by their accept_time property in descending order,
        where accept_time is a timestamp of when the message was enqueued by the Conversation API.
        This means messages received most recently will be listed first.
      tags:
        - Conversation
      summary: List messages
      operationId: Conversation_ListMessages
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ListMessagesResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  /v1/projects/{project_id}/messages/{message_id}:
    parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/message_id'
    get:
      description: Retrieves a message by id.
      tags:
        - Messages
      summary: Get a message
      operationId: Messages_GetMessage
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeConversationMessage"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
    delete:
      description: |-
        Deletes a message that is part of a conversation.
        Removing the last message of a conversation will not delete the conversation.
      tags:
        - Messages
      summary: Deletes a message
      operationId: Messages_DeleteMessage
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  /v1/projects/{project_id}/messages:send:
    parameters:
        - $ref: '#/components/parameters/project_id'
    post:
      description: |-
        Sends a message to the referenced contact from the referenced app.
        Note that this operation enqueues the message in a queues so a successful
        response only indicates that the message has been queued.
        The message is added to the active conversation with the contact if such conversation exists.
        If no active conversation exists a new one is started automatically.
      tags:
        - Messages
      summary: Send a message
      operationId: Messages_SendMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v1SendMessageRequest"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1SendMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  /v1/projects/{project_id}/messages:transcode:
    parameters:
        - $ref: '#/components/parameters/project_id'
    post:
      description: |-
        Transcodes the message from the Conversation API format to the
        channel-specific formats for the requested channels. No message
        is sent to the contact.
      tags:
        - Transcoding
      summary: Transcode a message
      operationId: Transcoding_TranscodeMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v1TranscodeMessageRequest"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1TranscodeMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  /v1/projects/{project_id}/optins:register:
    parameters:
        - $ref: '#/components/parameters/project_id'
        - description: |-
            ID for the asynchronous request, will be generated if not set.
            Currently this field is not used for idempotency but it will be added in v1.
          name: request_id
          in: query
          schema:
            type: string
    post:
      description: |-
        This method is asynchronous - it returns immediately the
        requested OptIn registration with any defaults resolved.
        All changes of the actual opt-in status are then delivered as callbacks
        to registered webhooks with trigger OPT_IN.
      tags:
        - OptIn
      summary: Register an opt-in
      operationId: OptIn_RegisterOptIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/typeOptIn"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1OptInResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  /v1/projects/{project_id}/optouts:register:
    parameters:
        - $ref: '#/components/parameters/project_id'
        - description: |-
            ID for the asynchronous request, will be generated if not set.
            Currently this field is not used for idempotency but it will be added in v1.
          name: request_id
          in: query
          schema:
            type: string
    post:
      description: |-
        This method is asynchronous - it returns immediately the
        requested OptOut registration with any defaults resolved.
        All changes of the actual opt-out status are then delivered as callbacks
        to registered webhooks with trigger OPT_OUT.
      tags:
        - OptIn
      summary: Register an opt-out
      operationId: OptIn_RegisterOptOut
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/typeOptOut"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1OptOutResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  /v1/projects/{project_id}/webhooks:
    parameters:
      - $ref: '#/components/parameters/project_id'
    post:
      description: |-
        Creates a webhook for receiving callbacks on specific triggers.
        You can create up to 20 webhooks per app.
      tags:
        - Webhooks
      summary: Create a new webhook
      operationId: Webhooks_CreateWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/typeWebhook"
        description: Required. The Webhook to create
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeWebhook"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  /v1/projects/{project_id}/webhooks/{webhook_id}:
    parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/webhook_id'
        - description: The set of field mask paths.
          name: update_mask.paths
          in: query
          explode: true
          schema:
            type: array
            items:
              type: string
    get:
      tags:
        - Webhooks
      summary: Get a webhook
      operationId: Webhooks_GetWebhook
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeWebhook"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
    patch:
      tags:
        - Webhooks
      summary: Update an existing webhook
      operationId: Webhooks_UpdateWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/typeWebhook"
        description: Required. The Webhook to update
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeWebhook"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
    delete:
      tags:
        - Webhooks
      summary: Delete an existing webhook
      operationId: Webhooks_DeleteWebhook
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
tags:
  - description: Endpoint for sending messages
    name: Messages
  - description: Endpoints for managing Conversation API apps
    name: App
  - description: Endpoints for managing contacts
    name: Contact
  - description: Endpoints for working with the conversation log
    name: Conversation
  - description: Endpoint for sending events
    name: Events
  - description: Endpoint for transcoding generic message format to channel-specific one
    name: Transcoding
x-explorer-enabled: false
x-samples-languages:
  - curl
  - java
  - csharp
  - node
  - php
servers:
  - url: "https://eu.conversation.api.sinch.com"
components:
  parameters:
    project_id:
      name: project_id
      description: The unique ID of the project. You can find this on the Sinch Dashboard.
      in: path
      required: true
      schema:
        type: string
    app_id:
      name: app_id
      description: The unique ID of the app. You can find this on the Sinch Dashboard.
      in: path
      required: true
      schema:
        type: string
    contact_id:
      name: contact_id
      description: The unique ID of the contact.
      in: path
      required: true
      schema:
        type: string
    webhook_id:
      name: webhook_id
      description: The unique ID of the webhook.
      in: path
      required: true
      schema:
        type: string
    destination_id:
      name: destination_id
      description: The unique ID of the contact that should be kept when merging two contacts.
      in: path
      required: true
      schema:
        type: string
    conversation_id:
      name: conversation_id
      description: The unique ID of the conversation. This is generated by the system.
      in: path
      required: true
      schema:
        type: string
    message_id:
      name: message_id
      description: Required. The conversation message ID.
      in: path
      required: true
      schema:
        type: string
      
  schemas:
    protobufAny:
      type: object
      properties:
        type_url:
          type: string
        value:
          type: string
          format: byte
    protobufFieldMask:
      description: |-
        paths: "f.a"
            paths: "f.b.d"

        Here `f` represents a field in some root message, `a` and `b`
        fields in the message found in `f`, and `d` a field found in the
        message in `f.b`.

        Field masks are used to specify a subset of fields that should be
        returned by a get operation or modified by an update operation.
        Field masks also have a custom JSON encoding (see below).

        # Field Masks in Projections

        When used in the context of a projection, a response message or
        sub-message is filtered by the API to only contain those fields as
        specified in the mask. For example, if the mask in the previous
        example is applied to a response message as follows:

            f {
              a : 22
              b {
                d : 1
                x : 2
              }
              y : 13
            }
            z: 8

        The result will not contain specific values for fields x,y and z
        (their value will be set to the default, and omitted in proto text
        output):


            f {
              a : 22
              b {
                d : 1
              }
            }

        A repeated field is not allowed except at the last position of a
        paths string.

        If a FieldMask object is not present in a get operation, the
        operation applies to all fields (as if a FieldMask of all fields
        had been specified).

        Note that a field mask does not necessarily apply to the
        top-level response message. In case of a REST get operation, the
        field mask applies directly to the response, but in case of a REST
        list operation, the mask instead applies to each individual message
        in the returned resource list. In case of a REST custom method,
        other definitions may be used. Where the mask applies will be
        clearly documented together with its declaration in the API.  In
        any case, the effect on the returned resource/resources is required
        behavior for APIs.

        # Field Masks in Update Operations

        A field mask in update operations specifies which fields of the
        targeted resource are going to be updated. The API is required
        to only change the values of the fields as specified in the mask
        and leave the others untouched. If a resource is passed in to
        describe the updated values, the API ignores the values of all
        fields not covered by the mask.

        If a repeated field is specified for an update operation, new values will
        be appended to the existing repeated field in the target resource. Note that
        a repeated field is only allowed in the last position of a `paths` string.

        If a sub-message is specified in the last position of the field mask for an
        update operation, then new value will be merged into the existing sub-message
        in the target resource.

        For example, given the target message:

            f {
              b {
                d: 1
                x: 2
              }
              c: [1]
            }

        And an update message:

            f {
              b {
                d: 10
              }
              c: [2]
            }

        then if the field mask is:

         paths: ["f.b", "f.c"]

        then the result will be:

            f {
              b {
                d: 10
                x: 2
              }
              c: [1, 2]
            }

        An implementation may provide options to override this default behavior for
        repeated and message fields.

        In order to reset a field's value to the default, the field must
        be in the mask and set to the default value in the provided resource.
        Hence, in order to reset all fields of a resource, provide a default
        instance of the resource and set all fields in the mask, or do
        not provide a mask as described below.

        If a field mask is not present on update, the operation applies to
        all fields (as if a field mask of all fields has been specified).
        Note that in the presence of schema evolution, this may mean that
        fields the client does not know and has therefore not filled into
        the request will be reset to their default. If this is unwanted
        behavior, a specific service may require a client to always specify
        a field mask, producing an error if not.

        As with get operations, the location of the resource which
        describes the updated values in the request message depends on the
        operation kind. In any case, the effect of the field mask is
        required to be honored by the API.

        ## Considerations for HTTP REST

        The HTTP kind of an update operation which uses a field mask must
        be set to PATCH instead of PUT in order to satisfy HTTP semantics
        (PUT must only be used for full updates).

        # JSON Encoding of Field Masks

        In JSON, a field mask is encoded as a single string where paths are
        separated by a comma. Fields name in each path are converted
        to/from lower-camel naming conventions.

        As an example, consider the following message declarations:

            message Profile {
              User user = 1;
              Photo photo = 2;
            }
            message User {
              string display_name = 1;
              string address = 2;
            }

        In proto a field mask for `Profile` may look as such:

            mask {
              paths: "user.display_name"
              paths: "photo"
            }

        In JSON, the same mask is represented as below:

            {
              mask: "user.displayName,photo"
            }

        # Field Masks and Oneof Fields

        Field masks treat fields in oneofs just as regular fields. Consider the
        following message:

            message SampleMessage {
              oneof test_oneof {
                string name = 4;
                SubMessage sub_message = 9;
              }
            }

        The field mask can be:

            mask {
              paths: "name"
            }

        Or:

            mask {
              paths: "sub_message"
            }

        Note that oneof type names ("test_oneof" in this case) cannot be used in
        paths.

        ## Field Mask Verification

        The implementation of any API method which has a FieldMask type field in the
        request should verify the included field paths, and return an
        `INVALID_ARGUMENT` error if any path is unmappable.
      type: object
      title: "`FieldMask` represents a set of symbolic field paths, for example:"
      properties:
        paths:
          description: The set of field mask paths.
          type: array
          items:
            type: string
    runtimeError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        details:
          type: array
          items:
            $ref: "#/components/schemas/protobufAny"
        error:
          type: string
        message:
          type: string
    typeApp:
      description: |-
        The app corresponds to the API user and is a collection of channel credentials
        allowing access to the underlying messaging channels.
        The app is tied to a set of webhooks which define the destination for various events coming from the Conversation API.
      type: object
      title: Conversation API app
      properties:
        channel_credentials:
          description: |-
            Channel credentials.
            The order of the credentials defines the
            app channel priority.
          type: array
          items:
            $ref: "#/components/schemas/typeConversationChannelCredential"
        conversation_metadata_report_view:
          $ref: "#/components/schemas/typeConversationMetadataReportView"
        display_name:
          description: Human readable identifier of the app. E.g. Sinch Conversation API Demo App 001.
          type: string
        id:
          description: Required. The ID of the app.
          type: string
        rate_limits:
          $ref: "#/components/schemas/typeRateLimits"
        retention_policy:
          $ref: "#/components/schemas/typeRetentionPolicy"
    typeAppEvent:
      type: object
      title: Message originating from an app
      properties:
        composing_event:
          $ref: "#/components/schemas/typeComposingEvent"
    typeAppMessage:
      type: object
      title: Message originating from an app
      properties:
        card_message:
          $ref: "#/components/schemas/typeCardMessage"
        carousel_message:
          $ref: "#/components/schemas/typeCarouselMessage"
        choice_message:
          $ref: "#/components/schemas/typeChoiceMessage"
        explicit_channel_message:
          description: |-
            Optional. Channel specific messages, overriding any transcoding.
            The key in the map must point to a valid conversation channel as
            defined by the enum ConversationChannel.
          type: object
          additionalProperties:
            type: string
        location_message:
          $ref: "#/components/schemas/typeLocationMessage"
        media_message:
          $ref: "#/components/schemas/typeMediaMessage"
        template_message:
          $ref: "#/components/schemas/typeTemplateMessage"
        text_message:
          $ref: "#/components/schemas/typeTextMessage"
    typeBasicAuthCredential:
      description: It consists of a username and a password.
      type: object
      title: Basic Auth Credential
      properties:
        password:
          description: Required. Basic auth password.
          type: string
        username:
          description: Required. Basic auth username.
          type: string
    typeCallMessage:
      description: Message for triggering a call.
      type: object
      title: Call Message
      properties:
        phone_number:
          description: Required. Phone number in E.164 with leading +.
          type: string
        title:
          description: |-
            Required. Title shown close to the phone number.
            The title is clickable in some cases.
          type: string
    typeCardHeight:
      type: string
      default: UNSPECIFIED_HEIGHT
      enum:
        - UNSPECIFIED_HEIGHT
        - SHORT
        - MEDIUM
        - TALL
    typeCardMessage:
      description: "Message containing text, media and choices."
      type: object
      title: Card Message
      properties:
        choices:
          description: Optional. The number of choices is limited to 3.
          type: array
          items:
            $ref: "#/components/schemas/typeChoice"
        description:
          description: Optional.
          type: string
        height:
          $ref: "#/components/schemas/typeCardHeight"
        media_message:
          $ref: "#/components/schemas/typeMediaMessage"
        title:
          description: Required.
          type: string
    typeCarouselMessage:
      description: |-
        Message containing a list of cards often
        rendered horizontally on supported channels. Supported
        types for media are only images, e.g. .png, .jpg, .jpeg
        extensions.
      type: object
      title: Carousel Message
      properties:
        cards:
          description: Required. A list of 1..10 cards.
          type: array
          items:
            $ref: "#/components/schemas/typeCardMessage"
        choices:
          description: |-
            Optional. Outer choices on the carousel level.
            The number of outer choices is limited to 3.
          type: array
          items:
            $ref: "#/components/schemas/typeChoice"
    typeChannelIdentities:
      type: object
      properties:
        channel_identities:
          description: |-
            A list of specific channel identities.
            The API will use these identities when sending to specific channels.
          type: array
          items:
            $ref: "#/components/schemas/typeChannelRecipientIdentity"
    typeChannelIdentity:
      description: |-
        A unique identity of message recipient on a particular channel.
        For example, the channel identity on SMS, WHATSAPP or VIBERBM is a MSISDN phone number.
      type: object
      title: Channel Identity
      properties:
        app_id:
          description: |-
            Optional. The Conversation API's app ID if this is app-scoped channel identity.
            Currently, FB Messenger and Viber are using app-scoped channel identities
            which means contacts will have different channel identities for different
            apps. FB Messenger uses PSIDs (Page-Scoped IDs) as channel identities.
            The app_id is pointing to the app linked to the FB page for which this PSID is issued.
          type: string
        channel:
          $ref: "#/components/schemas/typeConversationChannel"
        identity:
          description: "Required. The channel identity e.g., a phone number for SMS, WhatsApp and Viber Business."
          type: string
    typeChannelRecipientIdentity:
      type: object
      properties:
        channel:
          $ref: "#/components/schemas/typeConversationChannel"
        identity:
          description: Required. The channel recipient identity.
          type: string
    typeChoice:
      description: |-
        A choice is an action the user can take such as
        buttons for quick replies, call actions etc.
      type: object
      title: Choice/Action
      properties:
        call_message:
          $ref: "#/components/schemas/typeCallMessage"
        location_message:
          $ref: "#/components/schemas/typeLocationMessage"
        postback_data:
          description: |-
            Optional. This data will be returned in the ChoiceResponseMessage.
            The default is message_id_{text, title}.
          type: string
        text_message:
          $ref: "#/components/schemas/typeTextMessage"
        url_message:
          $ref: "#/components/schemas/typeUrlMessage"
    typeChoiceMessage:
      description: Message containing choices/actions.
      type: object
      title: Choice Message
      properties:
        choices:
          description: Required. The number of choices is limited to 3.
          type: array
          items:
            $ref: "#/components/schemas/typeChoice"
        text_message:
          $ref: "#/components/schemas/typeTextMessage"
    typeChoiceResponseMessage:
      description: Represents a response to a choice message.
      type: object
      title: Choice Response Message
      properties:
        message_id:
          description: Required. The message id containing the choice.
          type: string
        postback_data:
          description: Required. The postback_data defined in the selected choice.
          type: string
    typeClientCredentials:
      type: object
      properties:
        client_id:
          description: Required. The Client ID that will be used in the Client Credentials flow.
          type: string
        client_secret:
          description: Required. The Client Secret that will be used in the Client Credentials flow.
          type: string
        endpoint:
          description: Required. The endpoint that will be used in the Client Credentials flow.
          type: string
    typeComposingEvent:
      type: object
    typeContact:
      description: |-
        A participant in a conversation typically representing a person.
        It is associated with a collection of channel identities.
      type: object
      title: Contact
      properties:
        channel_identities:
          description: List of channel identities.
          type: array
          items:
            $ref: "#/components/schemas/typeChannelIdentity"
        channel_priority:
          description: List of channels defining the channel priority.
          type: array
          items:
            $ref: "#/components/schemas/typeConversationChannel"
        display_name:
          type: string
          title: Optional. The display name. A default 'Unknown' will be assigned if left empty
        email:
          description: Optional. Email of the contact.
          type: string
        external_id:
          description: Optional. Contact identifier in an external system.
          type: string
        id:
          description: The ID of the contact.
          type: string
        language:
          $ref: "#/components/schemas/typeContactLanguage"
        metadata:
          description: |-
            Optional. Metadata associated with the contact.
            Up to 1024 characters long.
          type: string
    typeContactLanguage:
      type: string
      default: UNSPECIFIED
      enum:
        - UNSPECIFIED
        - AF
        - SQ
        - AR
        - AZ
        - BN
        - BG
        - CA
        - ZH
        - ZH_CN
        - ZH_HK
        - ZH_TW
        - HR
        - CS
        - DA
        - NL
        - EN
        - EN_GB
        - EN_US
        - ET
        - FIL
        - FI
        - FR
        - DE
        - EL
        - GU
        - HA
        - HE
        - HI
        - HU
        - ID
        - GA
        - IT
        - JA
        - KN
        - KK
        - KO
        - LO
        - LV
        - LT
        - MK
        - MS
        - ML
        - MR
        - NB
        - FA
        - PL
        - PT
        - PT_BR
        - PT_PT
        - PA
        - RO
        - RU
        - SR
        - SK
        - SL
        - ES
        - ES_AR
        - ES_ES
        - ES_MX
        - SW
        - SV
        - TA
        - TE
        - TH
        - TR
        - UK
        - UR
        - UZ
        - VI
        - ZU
    typeContactMessage:
      type: object
      title: Message originating from a contact
      properties:
        choice_response_message:
          $ref: "#/components/schemas/typeChoiceResponseMessage"
        fallback_message:
          $ref: "#/components/schemas/typeFallbackMessage"
        location_message:
          $ref: "#/components/schemas/typeLocationMessage"
        media_card_message:
          $ref: "#/components/schemas/typeMediaCardMessage"
        media_message:
          $ref: "#/components/schemas/typeMediaMessage"
        reply_to:
          $ref: "#/components/schemas/typeReplyTo"
        text_message:
          $ref: "#/components/schemas/typeTextMessage"
    typeConversation:
      description: |-
        A collection of messages exchanged between a contact and an app.
        Conversations are normally created on the fly by Conversation API once
        a message is sent and there is no active conversation already.
        There can be only one active conversation at any given time between
        a particular contact and an app.
      type: object
      title: Conversation
      properties:
        active:
          description: Flag for whether this conversation is active.
          type: boolean
        active_channel:
          $ref: "#/components/schemas/typeConversationChannel"
        app_id:
          description: The ID of the participating app.
          type: string
        contact_id:
          description: The ID of the participating contact.
          type: string
        id:
          description: The ID of the conversation.
          type: string
        last_received:
          description: |-
            Output only. The timestamp of the latest message in the conversation. The timestamp will be
            Thursday January 01, 1970 00:00:00 UTC if the conversation contains no messages.
          type: string
          format: date-time
          readOnly: true
        metadata:
          description: |-
            An arbitrary data set by the Conversation API clients.
            Up to 1024 characters long.
          type: string
    typeConversationChannel:
      type: string
      title: Channel Identifier
      default: CHANNEL_UNSPECIFIED
      enum:
        - CHANNEL_UNSPECIFIED
        - WHATSAPP
        - RCS
        - SMS
        - MESSENGER
        - VIBER
        - VIBERBM
        - MMS
    typeConversationChannelCredential:
      description: Enables access to the underlying messaging channel.
      type: object
      title: Channel Credential
      properties:
        callback_secret:
          description: |-
            Optional. The secret used to verify the channel callbacks
            for channels which support callback verification.
            The callback verification is not needed for Sinch-managed
            channels because the callbacks are not leaving
            Sinch internal networks.
            Max length is 256 characters.
            Note: leaving channel_callback_secret empty for channels with
            callback verification will disable the verification.
          type: string
        channel:
          $ref: "#/components/schemas/typeConversationChannel"
        mms_credentials:
          $ref: "#/components/schemas/typeMMSCredentials"
        static_bearer:
          $ref: "#/components/schemas/typeStaticBearerCredential"
        static_token:
          $ref: "#/components/schemas/typeStaticTokenCredential"
    typeConversationDirection:
      type: string
      default: UNDEFINED_DIRECTION
      enum:
        - UNDEFINED_DIRECTION
        - TO_APP
        - TO_CONTACT
    typeConversationMergeStrategy:
      type: string
      default: MERGE
      enum:
        - MERGE
    typeConversationMessage:
      description: A message on a particular channel.
      type: object
      title: Conversation Message
      properties:
        accept_time:
          description: Output only.
          type: string
          format: date-time
          readOnly: true
        app_message:
          $ref: "#/components/schemas/typeAppMessage"
        channel_identity:
          $ref: "#/components/schemas/typeChannelIdentity"
        contact_id:
          description: Required. The ID of the contact.
          type: string
        contact_message:
          $ref: "#/components/schemas/typeContactMessage"
        conversation_id:
          description: Required. The ID of the conversation.
          type: string
        direction:
          $ref: "#/components/schemas/typeConversationDirection"
        id:
          description: Required. The ID of the message.
          type: string
        metadata:
          description: |-
            Optional. Metadata associated with the contact.
            Up to 1024 characters long.
          type: string
    typeConversationMetadataReportView:
      type: string
      default: NONE
      enum:
        - NONE
        - FULL
    typeCoordinates:
      type: object
      title: Geographic coordinates
      properties:
        latitude:
          description: Required. The latitude.
          type: number
          format: float
        longitude:
          description: Required. The longitude.
          type: number
          format: float
    typeFallbackMessage:
      type: object
      title: "Fallback message, appears when original contact message can not be handled"
      properties:
        raw_message:
          description: Optional. The raw fallback message if provided by the channel.
          type: string
        reason:
          $ref: "#/components/schemas/typeReason"
    typeLocationMessage:
      type: object
      title: Message with geo location
      properties:
        coordinates:
          $ref: "#/components/schemas/typeCoordinates"
        label:
          description: Optional. Label or name for the position.
          type: string
        title:
          description: |-
            Required. The title is shown close to the
            button or link that leads to a map showing the location.
            The title is clickable in some cases.
          type: string
    typeMMSCredentials:
      type: object
      title: MMS channel credential
      properties:
        account_id:
          description: Required. MMS Account ID.
          type: string
        api_key:
          description: Required. MMS API Key.
          type: string
        basic_auth:
          $ref: "#/components/schemas/typeBasicAuthCredential"
    typeMediaCardMessage:
      type: object
      title: Contact Message containing media and caption
      properties:
        caption:
          description: "Optional. Caption for the media on channels, where its supported."
          type: string
        url:
          description: Required. Url to the file.
          type: string
    typeMediaMessage:
      type: object
      title: Message containing media
      properties:
        thumbnail_url:
          type: string
          title: Optional. Will be used where it is natively supported
        url:
          description: Required. Url to the file.
          type: string
    typeMessageQueue:
      type: string
      default: NORMAL_PRIORITY
      enum:
        - NORMAL_PRIORITY
        - HIGH_PRIORITY
    typeOptIn:
      description: |-
        An Opt-In contains the identity of the recipient which
        gave its consent to receive messages from Conversation API apps
        on a given channel.
      type: object
      title: Represents an explicit Opt-In registration
      properties:
        app_id:
          description: Required. The app for which the Opt-In is being registered.
          type: string
        channels:
          description: |-
            Required. The channels covered by this Opt-In.
            The default are all the channels for a contact if recipient is
            contact_id or the channels in the channel_identities list.
          type: array
          items:
            $ref: "#/components/schemas/typeConversationChannel"
        recipient:
          $ref: "#/components/schemas/typeRecipient"
    typeOptOut:
      description: |-
        An Opt-Out contains the identity of the recipient which
        retract its consent to receive messages from Conversation API apps
        on a given channel.
      type: object
      title: Represents an explicit Opt-Out registration
      properties:
        app_id:
          description: Required. The app for which the Opt-Out is being registered.
          type: string
        channels:
          description: |-
            Required. The channels covered by this Opt-Out.
            The default are all the channels for a contact if recipient is
            contact_id or the channels in the channel_identities list.
          type: array
          items:
            $ref: "#/components/schemas/typeConversationChannel"
        recipient:
          $ref: "#/components/schemas/typeRecipient"
    typeRateLimits:
      type: object
      properties:
        inbound:
          description: |-
            Output only. The number of inbound messages/events we process per second,
            from underlying channels to the app.  The default rate limit is 25.
          type: integer
          format: int64
          readOnly: true
        outbound:
          description: |-
            Output only. The number of messages/events we process per second, from the
            app to the underlying channels. Note that underlying channels may have other
            rate limits.  The default rate limit is 25.
          type: integer
          format: int64
          readOnly: true
        webhooks:
          description: |-
            Output only. The rate limit of callbacks sent to the webhooks registered
            for the app. Note that if you have multiple webhooks with shared triggers,
            multiple callbacks will be sent out for each triggering event. The default rate limit is 25.
          type: integer
          format: int64
          readOnly: true
    typeReason:
      type: object
      properties:
        code:
          $ref: "#/components/schemas/typeReasonCode"
        description:
          description: A textual description of the reason.
          type: string
        sub_code:
          $ref: "#/components/schemas/typeReasonSubCode"
    typeReasonCode:
      description: |2-
         - UNKNOWN: UNKNOWN is used if no other code can be used to describe the encountered error.
         - INTERNAL_ERROR: An internal error occurred. Please save the entire callback if you want to
        report an error.
         - RATE_LIMITED: The message or event was not sent due to rate limiting.
         - RECIPIENT_INVALID_CHANNEL_IDENTITY: The channel recipient identity was malformed.
         - RECIPIENT_NOT_REACHABLE: It was not possible to reach the contact, or channel recipient identity,
        on the channel.
         - RECIPIENT_NOT_OPTED_IN: The contact, or channel recipient identity, has not opt-ed in on the channel.
         - OUTSIDE_ALLOWED_SENDING_WINDOW: The allowed sending window has expired. See the channel documentation
        for more information about how the sending window works for the different
        channels.
         - CHANNEL_FAILURE: The channel failed to accept the message. The Conversation API performs
        multiple retries in case of transient errors
         - CHANNEL_BAD_CONFIGURATION: The configuration of the channel for the used App is wrong. The bad
        configuration caused the channel to reject the message. Please see
        the channel support documentation page for how to set it up correctly.
         - CHANNEL_CONFIGURATION_MISSING: The configuration of the channel is missing from the used App. Please see
        the channel support documentation page for how to set it up correctly.
         - MEDIA_TYPE_UNSUPPORTED: Some of the referenced media files is of a unsupported media type. Please
        read the channel support documentation page to find out the limitations
        on media that the different channels impose.
         - MEDIA_TOO_LARGE: Some of the referenced media files are too large. Please read the channel
        support documentation to find out the limitations on file size that the
        different channels impose.
         - MEDIA_NOT_REACHABLE: The provided media link was not accessible from the Conversation API or
        from the underlying channels. Please make sure that the media file is
        accessible.
         - NO_CHANNELS_LEFT: No channels to try to send the message to. This error will occur if one
        attempts to send a message to a channel with no channel identities or if
        all applicable channels have been attempted.
         - TEMPLATE_NOT_FOUND: The referenced template was not found.
         - TEMPLATE_INSUFFICIENT_PARAMETERS: Sufficient template parameters was not given. All parameters defined
        in the template must be provided when sending a template message
         - TEMPLATE_NON_EXISTING_LANGUAGE_OR_VERSION: The selected language, or version, of the referenced template did
        not exist. Please check the available versions and languages of the template
         - DELIVERY_TIMED_OUT: The message delivery, or event delivery, failed due to a channel-imposed timeout.
        See the channel support documentation page for further details
        about how the different channels behave.
         - DELIVERY_REJECTED_DUE_TO_POLICY: The message or event was rejected by the channel due to a policy.
        Some channels have specific policies that must be met to send a message.
        See the channel support documentation page for more information about
        when this error will be triggered.
         - CONTACT_NOT_FOUND: The provided Contact ID did not exist.
         - BAD_REQUEST: Conversation API validates send requests in two different stages.
        The first stage is right before the message is enqueued.
        If this first validation fails the API responds with 400 Bad Request
        and the request is discarded immediately.
        The second validation kicks in during message processing and
        it normally contains channel specific validation rules.
        Failures during second request validation are
        delivered as callbacks to MESSAGE_DELIVERY (EVENT_DELIVERY) webhooks
        with ReasonCode BAD_REQUEST.
         - UNKNOWN_APP: The used App is missing. This error may occur when the app is removed
        during message processing.
         - NO_CHANNEL_IDENTITY_FOR_CONTACT: The contact has no channel identities setup, or the contact has no
        channels setup for the resolved channel priorities.
         - CHANNEL_REJECT: Generic error for channel permanently rejecting a message.
        Only used if no other better matching error can be used
         - NO_PERMISSION: No permission to perform action
         - NO_PROFILE_AVAILABLE: No available profile data for user
         - UNSUPPORTED_OPERATION: Generic error for channel unsupported operations.
      type: string
      default: UNKNOWN
      enum:
        - UNKNOWN
        - INTERNAL_ERROR
        - RATE_LIMITED
        - RECIPIENT_INVALID_CHANNEL_IDENTITY
        - RECIPIENT_NOT_REACHABLE
        - RECIPIENT_NOT_OPTED_IN
        - OUTSIDE_ALLOWED_SENDING_WINDOW
        - CHANNEL_FAILURE
        - CHANNEL_BAD_CONFIGURATION
        - CHANNEL_CONFIGURATION_MISSING
        - MEDIA_TYPE_UNSUPPORTED
        - MEDIA_TOO_LARGE
        - MEDIA_NOT_REACHABLE
        - NO_CHANNELS_LEFT
        - TEMPLATE_NOT_FOUND
        - TEMPLATE_INSUFFICIENT_PARAMETERS
        - TEMPLATE_NON_EXISTING_LANGUAGE_OR_VERSION
        - DELIVERY_TIMED_OUT
        - DELIVERY_REJECTED_DUE_TO_POLICY
        - CONTACT_NOT_FOUND
        - BAD_REQUEST
        - UNKNOWN_APP
        - NO_CHANNEL_IDENTITY_FOR_CONTACT
        - CHANNEL_REJECT
        - NO_PERMISSION
        - NO_PROFILE_AVAILABLE
        - UNSUPPORTED_OPERATION
    typeReasonSubCode:
      description: |2-
         - UNSPECIFIED_SUB_CODE: UNSPECIFIED_SUB_CODE is used if no other sub code can be used to describe the encountered error.
         - ATTACHMENT_REJECTED: The message attachment was rejected by the channel due to a policy.
        Some channels have specific policies that must be met to receive an attachment.
         - MEDIA_TYPE_UNDETERMINED: The specified media urls media type could not be determined
         - INACTIVE_SENDER: The used credentials for the underlying channel is inactivated and not allowed to send or receive messages.
      type: string
      default: UNSPECIFIED_SUB_CODE
      enum:
        - UNSPECIFIED_SUB_CODE
        - ATTACHMENT_REJECTED
        - MEDIA_TYPE_UNDETERMINED
        - INACTIVE_SENDER
    typeRecipient:
      type: object
      title: Recipient
      properties:
        contact_id:
          description: The ID of the receiving contact.
          type: string
        identified_by:
          $ref: "#/components/schemas/typeChannelIdentities"
    typeReplyTo:
      description: If the contact message was a response to a previous App message then this field contains information about that.
      type: object
      title: Reply To
      properties:
        message_id:
          type: string
          title: Required. The Id of the message that this is a response to
    typeRetentionPolicy:
      type: object
      title: Retention policy for messages and conversations
      properties:
        retention_type:
          $ref: "#/components/schemas/typeRetentionPolicyType"
        ttl_days:
          description: |-
            Optional. The days before a message or conversation is eligible for deletion.
            Default value is 180. The ttl_days value has no effect when retention_type
            is PERSIST_RETENTION_POLICY. The valid values for this field are [1 - 3650].
            Note that retention cleanup job runs once every twenty-four hours
            which can lead to delay i.e., messages and conversations are not deleted on
            the minute they become eligible for deletion.
          type: integer
          format: int64
    typeRetentionPolicyType:
      description: |2-
         - MESSAGE_EXPIRE_POLICY: The default retention policy where messages older than
        ttl_days are automatically deleted from Conversation API database.
         - CONVERSATION_EXPIRE_POLICY: The conversation expire policy only considers the last message in a conversation.
        If the last message is older that ttl_days the entire conversation is deleted.
        The difference with MESSAGE_EXPIRE_POLICY is that messages with accept_time
        older than ttl_days are persisted as long as there is a newer message in the
        same conversation.
         - PERSIST_RETENTION_POLICY: Persist policy does not delete old messages or conversations.
        Please note that message storage might be subject to additional charges
        in the future.
      type: string
      default: MESSAGE_EXPIRE_POLICY
      enum:
        - MESSAGE_EXPIRE_POLICY
        - CONVERSATION_EXPIRE_POLICY
        - PERSIST_RETENTION_POLICY
    typeStaticBearerCredential:
      description: It consists of claimed identity and a static token.
      type: object
      title: Bearer Channel Credential
      properties:
        claimed_identity:
          description: Required. Claimed identity.
          type: string
        token:
          description: Required. Static bearer token.
          type: string
    typeStaticTokenCredential:
      type: object
      title: Static Token Credential
      properties:
        token:
          description: Required. The static token.
          type: string
    typeTemplateMessage:
      type: object
      title: Message referring to predefined template
      properties:
        channel_template:
          description: |-
            Optional. Channel specific template reference with parameters per channel.
            The channel template if exists overrides the omnichannel template.
            At least one of channel_template or omni_template needs to be present.
            The key in the map must point to a valid conversation channel as
            defined by the enum ConversationChannel.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/typeTemplateReference"
        omni_template:
          $ref: "#/components/schemas/typeTemplateReference"
    typeTemplateReference:
      description: |-
        The referenced template can be an omnichannel template
        stored in Conversation API Template Store as AppMessage
        or it can reference external channel-specific template
        such as WhatsApp Business Template.
      type: object
      title: Template reference with concrete parameter values
      properties:
        language_code:
          description: |-
            Optional. The BCP-47 language code, such as "en-US" or "sr-Latn".
            For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
            English is the default language_code.
          type: string
        parameters:
          description: |-
            Optional. Required if the template
            has parameters. Concrete values must
            be present for all defined parameters
            in the template. Parameters can be different for
            different versions and/or languages of the template.
          type: object
          additionalProperties:
            type: string
        template_id:
          description: Required. The ID of the template.
          type: string
        version:
          description: |-
            Required. Used to specify what version of a template to use.
            This will be used in conjunction with language_code.
          type: string
    typeTextMessage:
      type: object
      title: Message containing only text
      properties:
        text:
          description: Required. The text to be sent.
          type: string
    typeUrlMessage:
      description: A generic URL message.
      type: object
      title: Url Message
      properties:
        title:
          description: |-
            Required. The title shown close to the URL.
            The title will be clickable in some cases.
          type: string
        url:
          description: Required. The url to show.
          type: string
    typeWebhook:
      description: Represents a destination for receiving callbacks from the Conversation API.
      type: object
      title: Webhook
      properties:
        app_id:
          description: The app that this webhook belongs to.
          type: string
        client_credentials:
          $ref: "#/components/schemas/typeClientCredentials"
        id:
          description: Output only. The ID of the webhook.
          type: string
          readOnly: true
        secret:
          description: |-
            Optional secret be used to sign contents of webhooks sent by the Conversation API.
            You can then use the secret to verify the signature.
          type: string
        target:
          description: |-
            The target url where events should be sent to.
            Maximum URL length is 742.
          type: string
        target_type:
          $ref: "#/components/schemas/typeWebhookTargetType"
        triggers:
          description: |-
            An array of triggers that should trigger the webhook and result in a
            event being sent to the target url.
          type: array
          items:
            $ref: "#/components/schemas/typeWebhookTrigger"
    typeWebhookTargetType:
      type: string
      default: DISMISS
      enum:
        - DISMISS
        - GRPC
        - HTTP
    typeWebhookTrigger:
      description: |-
        - UNSPECIFIED_TRIGGER: Using this value will cause errors.
         - MESSAGE_DELIVERY: Subscribe to delivery receipts for a message sent.
         - EVENT_DELIVERY: Subscribe to delivery receipts for a event sent.
         - MESSAGE_INBOUND: Subscribe to inbound messages from end users on the underlying channels.
         - EVENT_INBOUND: Subscribe to inbound events from end users on the underlying channels.
         - CONVERSATION_START: Subscribe to an event that is triggered when a new conversation has been started.
         - CONVERSATION_STOP: Subscribe to an event that is triggered when a active conversation has been stopped.
         - CONTACT_CREATE: Subscribe to an event that is triggered when a new contact has been created.
         - CONTACT_DELETE: Subscribe to an event that is triggered when a contact has been deleted.
         - CONTACT_MERGE: Subscribe to an event that is triggered when a two contacts are merged.
         - UNSUPPORTED: Subscribe to callbacks that are not natively supported by the Conversation API.
         - OPT_IN: Subscribe to opt_ins.
         - OPT_OUT: Subscribe to opt_outs.
         - CAPABILITY: Subscribe to see get capability results.
         - CONVERSATION_DELETE: Subscribe to get an event when a conversation is deleted
      type: string
      title: En event triggering Conversation API callback
      default: UNSPECIFIED_TRIGGER
      enum:
        - UNSPECIFIED_TRIGGER
        - MESSAGE_DELIVERY
        - EVENT_DELIVERY
        - MESSAGE_INBOUND
        - EVENT_INBOUND
        - CONVERSATION_START
        - CONVERSATION_STOP
        - CONTACT_CREATE
        - CONTACT_DELETE
        - CONTACT_MERGE
        - UNSUPPORTED
        - OPT_IN
        - OPT_OUT
        - CAPABILITY
        - CONVERSATION_DELETE
    v1ConversationMessagesView:
      type: string
      default: WITH_METADATA
      enum:
        - WITH_METADATA
        - WITHOUT_METADATA
    v1ListAppsResponse:
      type: object
      properties:
        apps:
          description: List of apps belonging to a specific project ID.
          type: array
          items:
            $ref: "#/components/schemas/typeApp"
    v1ListContactsResponse:
      type: object
      properties:
        contacts:
          description: List of contacts belonging to the specified project.
          type: array
          items:
            $ref: "#/components/schemas/typeContact"
        next_page_token:
          description: |-
            Token that should be included in the next list contacts request to
            fetch the next page.
          type: string
    v1ListConversationsResponse:
      type: object
      properties:
        conversations:
          description: Output only. List of conversations matching the search query.
          type: array
          items:
            $ref: "#/components/schemas/typeConversation"
          readOnly: true
        next_page_token:
          type: string
        total_size:
          type: integer
          format: int32
    v1ListMessagesResponse:
      type: object
      properties:
        messages:
          description: Output only. List of messages associated to the referenced conversation.
          type: array
          items:
            $ref: "#/components/schemas/typeConversationMessage"
          readOnly: true
        next_page_token:
          type: string
    v1ListWebhooksResponse:
      type: object
      properties:
        webhooks:
          type: array
          title: List of webhooks belonging to a specific project ID and app ID
          items:
            $ref: "#/components/schemas/typeWebhook"
    v1MergeContactRequest:
      type: object
      properties:
        destination_id:
          description: Required. The ID of the contact that should be kept.
          type: string
        project_id:
          description: Required. The project ID.
          type: string
        source_id:
          description: Required. The ID of the contact that should be removed.
          type: string
        strategy:
          $ref: "#/components/schemas/typeConversationMergeStrategy"
    v1OptInResponse:
      type: object
      properties:
        opt_in:
          $ref: "#/components/schemas/typeOptIn"
        request_id:
          type: string
          title: "ID for the asynchronous request, will be generated id if not set in request"
    v1OptOutResponse:
      type: object
      properties:
        opt_out:
          $ref: "#/components/schemas/typeOptOut"
        request_id:
          type: string
          title: "ID for the asynchronous request, will be generated id if not set in request"
    v1QueryCapabilityRequest:
      type: object
      properties:
        app_id:
          description: Required. The ID of the app to use for capability lookup.
          type: string
        project_id:
          description: Required. The project ID.
          type: string
        recipient:
          $ref: "#/components/schemas/typeRecipient"
        request_id:
          type: string
          title: |-
            ID for the asynchronous request, will be generated if not set.
            Currently this field is not used for idempotency but it will be added in v1
    v1QueryCapabilityResponse:
      description: |-
        An CapabilityResponse contains the identity of the recipient for which
        will be perform a capability lookup.
      type: object
      title: Represents an explicit Capability registration
      properties:
        app_id:
          description: Required. The ID of the app to use for capability lookup.
          type: string
        recipient:
          $ref: "#/components/schemas/typeRecipient"
        request_id:
          type: string
          title: "ID for the asynchronous request, will be generated id if not set in request"
    v1SendEventRequest:
      type: object
      properties:
        app_id:
          description: Required. The ID of the app sending the event.
          type: string
        callback_url:
          description: |-
            Optional. Overwrites the default callback url for delivery reports for this event
            The REST URL should be of the form: scheme://host[:port]/path
            where scheme is http or https.
            The gRPC URL should be of the form: dns://host[:port]
            (See: https://github.com/grpc/grpc/blob/master/doc/naming.md).
          type: string
        channel_priority_order:
          description: |-
            Optional. Channel priority order that dictates on which channels the
            Conversation API should try to send the message on. The order provided
            here overrides any default.
          type: array
          items:
            $ref: "#/components/schemas/typeConversationChannel"
        event:
          $ref: "#/components/schemas/typeAppEvent"
        event_metadata:
          description: Optional. Eventual metadata that should be associated to the event.
          type: string
        project_id:
          description: Required. The project ID.
          type: string
        queue:
          $ref: "#/components/schemas/typeMessageQueue"
        recipient:
          $ref: "#/components/schemas/typeRecipient"
    v1SendEventResponse:
      type: object
      properties:
        accepted_time:
          description: Output only. Accepted timestamp.
          type: string
          format: date-time
          readOnly: true
        event_id:
          description: Output only. Event id.
          type: string
          readOnly: true
    v1SendMessageRequest:
      type: object
      properties:
        app_id:
          description: Required. The ID of the app sending the message.
          type: string
        callback_url:
          description: |-
            Optional. Overwrites the default callback url for delivery reports for this message
            The REST URL should be of the form: scheme://host[:port]/path
            where scheme is http or https.
            The gRPC URL should be of the form: dns://host[:port]
            (See: https://github.com/grpc/grpc/blob/master/doc/naming.md).
          type: string
        channel_priority_order:
          description: |-
            Optional. Explicitly define the channels and order in which they are tried when sending the message.
            Note that collection can't contain 'CHANNEL_UNSPECIFIED' value.
            Which channels the API will try and their priority is defined by:
            1. channel_priority_order if available.
            2. recipient.identified_by.channel_identities if available.
            3. When recipient is a contact_id:
              - if a conversation with the contact exists: the active channel of the conversation is tried first.
              - the existing channels for the contact are ordered by contact channel preferences if given.
              - lastly the existing channels for the contact are ordered by the app priority.
          type: array
          items:
            $ref: "#/components/schemas/typeConversationChannel"
        channel_properties:
          description: |-
            Optional. Channel-specific properties.
            The key in the map must point to a valid channel property key as
            defined by the enum ChannelPropertyKeys.
            The maximum allowed property value length is 1024 characters.
          type: object
          additionalProperties:
            type: string
        message:
          $ref: "#/components/schemas/typeAppMessage"
        message_metadata:
          description: Optional. Eventual metadata that should be associated to the message.
          type: string
        project_id:
          description: Required. The project ID.
          type: string
        queue:
          $ref: "#/components/schemas/typeMessageQueue"
        recipient:
          $ref: "#/components/schemas/typeRecipient"
        ttl:
          description: |-
            Optional. Duration for trying to send the message.
            Passed onto for channels which have support for it and
            emulated by Conversation API for channels without ttl support
            but message retract/unsend functionality.
            Channel failover will not be performed for messages with
            expired TTL.
          type: string
    v1SendMessageResponse:
      type: object
      properties:
        accepted_time:
          description: |-
            Output only. Timestamp corresponding to when the Conversation API
            accepted the message for delivery to the referenced contact.
          type: string
          format: date-time
          readOnly: true
        message_id:
          description: Output only. Message id.
          type: string
          readOnly: true
    v1TranscodeMessageRequest:
      type: object
      properties:
        app_id:
          description: Required. The ID of the app used to transcode the message.
          type: string
        app_message:
          $ref: "#/components/schemas/typeAppMessage"
        channels:
          description: Required. The list of channels for which the message shall be transcoded to.
          type: array
          items:
            $ref: "#/components/schemas/typeConversationChannel"
        from:
          description: Optional.
          type: string
        project_id:
          description: Required. The project ID.
          type: string
        to:
          description: Optional.
          type: string
    v1TranscodeMessageResponse:
      type: object
      properties:
        transcoded_message:
          description: |-
            Output only. The transcoded message for the different channels.
            The keys in the map correspond to channel names, as defined by the type
            ConversationChannel.
          type: object
          additionalProperties:
            type: string
          readOnly: true
x-readme:
  proxy-enabled: true
  samples-enabled: true
