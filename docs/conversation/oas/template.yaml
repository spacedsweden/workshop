openapi: 3.0.0
info:
  contact:
    email: support@sinch.com
    name: support at sinch
  description: |
    # Managing templates
    The Template Management API offers a way to manage templates that can be used together with the Conversation API.

    One can view a template as a pre-defined message that can optionally contain some parameters to facilitate some customization of the pre-defined message. This feature can, for instance, be used to construct a generic customer welcome message where the customer's name can be injected via a parameter. It's also possible to provide translations to different languages when creating a template to make it possible to reuse one template for different languages.

    ## Accessing the Template Management API
    The first step towards interacting with the Template Management API is to create an account on the [Sinch Portal](https://dashboard.sinch.com). The next step is to create an Access Key under the Settings tab and note down the provided Key ID and Key Secret in a secure location. Also make sure to remember the Project ID since your template will be placed under the provided Project ID.

    The Key ID and the Key Secret are then used in the following way to obtain a valid OAuth2 Access Token that will be used to authenticate towards the Template Management API.
    ```console
    curl https://us.auth.sinch.com/oauth2/token -d grant_type=client_credentials --user <key_id>:<key_secret>
    ```

    The obtained Access Token is then used in the following way to interact with the Template Management API:
    ```console
    curl https://us.template.api.sinch.com/v1/projects/<Project ID>/templates -H "Authorization: Bearer <Access Token>"
    ```

    Note that the obtained token above is only valid when interacting with the Template Management API in the US region. Another Access Token must be obtained from the FQDN eu.auth.sinch.com to interact with the Template Management API in the EU region(FQDN eu.template.api.sinch.com).
  title: Template Management API
  version: 457aacb5
paths:
  "/v1/projects/{project_id}/templates":
    get:
      tags:
        - Templates
      summary: List all templates belonging to a project ID.
      operationId: Templates_ListTemplates
      parameters:
        - description: Required. The project ID.
          name: project_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ListTemplatesResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
    post:
      tags:
        - Templates
      summary: Creates a template
      operationId: Templates_CreateTemplate
      parameters:
        - description: Required. The project ID.
          name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/typeTemplate"
        description: Required. The template to create.
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeTemplate"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  "/v1/projects/{project_id}/templates/{template.id}":
    patch:
      tags:
        - Templates
      summary: Updates a template.
      operationId: Templates_UpdateTemplate
      parameters:
        - description: Required. The project ID.
          name: project_id
          in: path
          required: true
          schema:
            type: string
        - description: |-
            The id of the template. Specify this yourself during creation
            otherwise we will generate an ID for you. This has to be unique
            for a given project.
          name: template.id
          in: path
          required: true
          schema:
            type: string
        - description: The set of field mask paths.
          name: update_mask.paths
          in: query
          explode: true
          schema:
            type: array
            items:
              type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/typeTemplate"
        description: Required. The updated template.
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeTemplate"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
  "/v1/projects/{project_id}/templates/{template_id}":
    get:
      tags:
        - Templates
      summary: Get a template
      operationId: Templates_GetTemplate
      parameters:
        - description: Required. The project ID.
          name: project_id
          in: path
          required: true
          schema:
            type: string
        - description: Required. The ID of the template to fetch.
          name: template_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/typeTemplate"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
    delete:
      tags:
        - Templates
      summary: Delete a template.
      operationId: Templates_DeleteTemplate
      parameters:
        - description: Required. The project ID.
          name: project_id
          in: path
          required: true
          schema:
            type: string
        - description: Required. The ID of the template to fetch.
          name: template_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/runtimeError"
tags:
  - description: Endpoints for managing message templates
    name: Templates
x-explorer-enabled: false
x-samples-languages:
  - curl
  - java
  - csharp
  - node
  - php
servers:
  - url: "https://us.template.api.sinch.com"
components:
  schemas:
    protobufAny:
      type: object
      properties:
        type_url:
          type: string
        value:
          type: string
          format: byte
    protobufFieldMask:
      description: |-
        paths: "f.a"
            paths: "f.b.d"

        Here `f` represents a field in some root message, `a` and `b`
        fields in the message found in `f`, and `d` a field found in the
        message in `f.b`.

        Field masks are used to specify a subset of fields that should be
        returned by a get operation or modified by an update operation.
        Field masks also have a custom JSON encoding (see below).

        # Field Masks in Projections

        When used in the context of a projection, a response message or
        sub-message is filtered by the API to only contain those fields as
        specified in the mask. For example, if the mask in the previous
        example is applied to a response message as follows:

            f {
              a : 22
              b {
                d : 1
                x : 2
              }
              y : 13
            }
            z: 8

        The result won't contain specific values for fields x,y and z
        (their value will be set to the default, and omitted in proto text
        output):


            f {
              a : 22
              b {
                d : 1
              }
            }

        A repeated field is not allowed except at the last position of a
        paths string.

        If a FieldMask object is not present in a get operation, the
        operation applies to all fields (as if a FieldMask of all fields
        had been specified).

        Note that a field mask doesn't necessarily apply to the
        top-level response message. In case of a REST get operation, the
        field mask applies directly to the response, but in case of a REST
        list operation, the mask instead applies to each individual message
        in the returned resource list. In case of a REST custom method,
        other definitions may be used. Where the mask applies will be
        clearly documented together with its declaration in the API.  In
        any case, the effect on the returned resource/resources is required
        behavior for APIs.

        # Field Masks in Update Operations

        A field mask in update operations specifies which fields of the
        targeted resource are going to be updated. The API is required
        to only change the values of the fields as specified in the mask
        and leave the others untouched. If a resource is passed in to
        describe the updated values, the API ignores the values of all
        fields not covered by the mask.

        If a repeated field is specified for an update operation, new values will
        be appended to the existing repeated field in the target resource. Note that
        a repeated field is only allowed in the last position of a `paths` string.

        If a sub-message is specified in the last position of the field mask for an
        update operation, then new value will be merged into the existing sub-message
        in the target resource.

        For example, given the target message:

            f {
              b {
                d: 1
                x: 2
              }
              c: [1]
            }

        And an update message:

            f {
              b {
                d: 10
              }
              c: [2]
            }

        then if the field mask is:

         paths: ["f.b", "f.c"]

        then the result will be:

            f {
              b {
                d: 10
                x: 2
              }
              c: [1, 2]
            }

        An implementation may provide options to override this default behavior for
        repeated and message fields.

        In order to reset a field's value to the default, the field must
        be in the mask and set to the default value in the provided resource.
        Hence, in order to reset all fields of a resource, provide a default
        instance of the resource and set all fields in the mask, or do
        not provide a mask as described below.

        If a field mask is not present on update, the operation applies to
        all fields (as if a field mask of all fields has been specified).
        Note that in the presence of schema evolution, this may mean that
        fields the client doesn't know and has therefore not filled into
        the request will be reset to their default. If this is unwanted
        behavior, a specific service may require a client to always specify
        a field mask, producing an error if not.

        As with get operations, the location of the resource which
        describes the updated values in the request message depends on the
        operation kind. In any case, the effect of the field mask is
        required to be honored by the API.

        ## Considerations for HTTP REST

        The HTTP kind of an update operation which uses a field mask must
        be set to PATCH instead of PUT in order to satisfy HTTP semantics
        (PUT must only be used for full updates).

        # JSON Encoding of Field Masks

        In JSON, a field mask is encoded as a single string where paths are
        separated by a comma. Fields name in each path are converted
        to/from lower-camel naming conventions.

        As an example, consider the following message declarations:

            message Profile {
              User user = 1;
              Photo photo = 2;
            }
            message User {
              string display_name = 1;
              string address = 2;
            }

        In proto a field mask for `Profile` may look as such:

            mask {
              paths: "user.display_name"
              paths: "photo"
            }

        In JSON, the same mask is represented as below:

            {
              mask: "user.displayName,photo"
            }

        # Field Masks and Oneof Fields

        Field masks treat fields in oneofs just as regular fields. Consider the
        following message:

            message SampleMessage {
              oneof test_oneof {
                string name = 4;
                SubMessage sub_message = 9;
              }
            }

        The field mask can be:

            mask {
              paths: "name"
            }

        Or:

            mask {
              paths: "sub_message"
            }

        Note that oneof type names ("test_oneof" in this case) can't be used in
        paths.

        ## Field Mask Verification

        The implementation of any API method which has a FieldMask type field in the
        request should verify the included field paths, and return an
        `INVALID_ARGUMENT` error if any path is unmappable.
      type: object
      title: "`FieldMask` represents a set of symbolic field paths, for example:"
      properties:
        paths:
          description: The set of field mask paths.
          type: array
          items:
            type: string
    runtimeError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        details:
          type: array
          items:
            $ref: "#/components/schemas/protobufAny"
        error:
          type: string
        message:
          type: string
    typeChannel:
      type: string
      default: UNSPECIFIED
      enum:
        - UNSPECIFIED
        - CONVERSATION
        - MESSENGER
        - WHATSAPP
        - RCS
        - SMS
        - VIBER
        - VIBERBM
    typeTemplate:
      type: object
      properties:
        channel:
          $ref: "#/components/schemas/typeChannel"
        create_time:
          description: Timestamp when the template was created.
          type: string
          format: date-time
        default_translation:
          type: string
          title: |-
            The default translation to use if not specified.
            Specified as a BCP-47 language_code and the language_code must exist
            in the translations list.g
        description:
          description: The description of the template.
          type: string
        id:
          description: |-
            The id of the template. Specify this yourself during creation
            otherwise we will generate an ID for you. This has to be unique
            for a given project.
          type: string
        translations:
          description: List of translations for the template.
          type: array
          items:
            $ref: "#/components/schemas/typeTemplateTranslation"
        update_time:
          description: Timestamp when the template was updated.
          type: string
          format: date-time
    typeTemplateTranslation:
      type: object
      properties:
        content:
          description: |-
            This is the definition of the template with the language
            specified in the language_code field.
          type: string
        create_time:
          description: Timestamp when the translation was created.
          type: string
          format: date-time
        language_code:
          description: |-
            The BCP-47 language code, such as "en-US" or "sr-Latn". For more information,
            see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
          type: string
        update_time:
          description: Timestamp of when the translation was updated.
          type: string
          format: date-time
        variables:
          description: List of expected variables. Can be used for request validation.
          type: array
          items:
            $ref: "#/components/schemas/typeTemplateVariable"
        version:
          description: The version of template.
          type: string
    typeTemplateVariable:
      type: object
      properties:
        key:
          type: string
        preview_value:
          type: string
    v1ListTemplatesResponse:
      type: object
      properties:
        templates:
          type: array
          title: "TODO: Pagination"
          items:
            $ref: "#/components/schemas/typeTemplate"
x-proxy-enabled: true
x-samples-enabled: true
