{
  "openapi": "3.0.0",
  "info": {
    "title": "Number Verification",
    "description": "Use the Sinch Verification Service to verify end-user’s mobile phone numbers. The Sinch Verification APIs should be used in combination with the Verification SDKs for a complete end-to-end solution, though it's possible to only use the APIs. Currently, there are three verification methods supported:\n\nFlashCall verification - Android only\nPIN SMS verification - iOS, Android, Javascript\nCallout verification (voice call) - iOS and JS only \n\n\nThe Sinch service uses three different verification methods:\n\nBy sending an **SMS** message with a PIN code\nBy placing a **flashcall** (missed call) and detecting the incoming calling number (CLI)\nBy placing a **call** to the user’s phone and playing an announcement, asking the user to press a particular digit to verify the phone number (only iOS)\n\n## FlashCall verification\nWith the flashCall verification method, a user’s phone number is verified by triggering a “missed call” towards this number. The call is intercepted by the Android SDK in the mobile app and blocked automatically.\n\nTo initiate a flashCall verification, check the Android SDK documentation. For additional security, it's recommended that you control which verification requests should proceed and which ones not, by listening in your backend for the Verification Request Event and respond accordingly. Your backend will be notified on the result of the verification with the Verification Result Event.\n\n## PIN SMS verification\nWith the PIN SMS verification method, a user’s phone number is verified by sending an SMS containing a PIN code to this number. In the case of iOS or Javascript, the user needs to enter the PIN manually in the app, while for Android there is an option of intercepting the SMS message delivery and capturing the PIN code automatically.\n\nTo initiate a PIN SMS verification, check the iOS, Android <smsverificationandroid> and Javascript documentation. For additional security, it's recommended that you control which verification requests should proceed and which ones not, by listening in your backend for the Verification Request Event and respond accordingly. Your backend will be notified on the result of the verification with the :ref: Verification Result Event <veri-res-event>\n  \n## Callout verification\nWith the callout verification method, a user’s phone number is verified by receiving a phone call and hearing a pre-recorded or text-to-speech message, advising the user to press a digit code. When the user presses the digit code in the dialpad, the verification is successful.\n\nTo initiate a callout verification, check the iOS documentation. For additional security, it's recommended that you control which verification requests should proceed and which ones not, by listening in your backend for the Verification Request Event and respond accordingly. Your backend will be notified on the result of the verification with the Verification Result Event\n  \n",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/spacedsweden/Verification/1.0.0",
      "description": "SwaggerHub API Auto Mocking"
    },
    {
      "url": "https://verificationapi-v1.sinch.com/verification/v1/",
      "description": "Sinch API servier"
    }
  ],
  "security": [
    {
      "BasicAuth": []
    }
  ],
  "paths": {
    "/verifications": {
      "post": {
        "summary": "Start a verification",
        "description": "It's a POST request which specifies the phone number that should be verified and the verification method.\n",
        "operationId": "initVerification",
        "requestBody": {
          "description": "A verification request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/verifications/{type}/{endpoint}": {
      "put": {
        "summary": "Report a verification",
        "description": "### Report back on a started verification\nAfter the SMS or flashcall is received (and intercepted, in case of Android), the client needs to report to the Sinch Verification service either the PIN (for SMS) or CLI (for flashCall).\n",
        "operationId": "reportVerification",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "type of verificaiton, sms, flashCall or callOut",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endpoint",
            "in": "path",
            "description": "the phonenumber",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationReport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": []
      }
    }
  },
  "components": {
    "schemas": {
      "VerificationRequest": {
        "type": "object",
        "properties": {
          "identity": {
            "$ref": "#/components/schemas/Identity"
          },
          "method": {
            "type": "string",
            "description": "Indicates the verification method. Possible value are: flashCall, sms or callout",
            "default": "sms",
            "enum": ["flashCall", "sms", "callout"]
          },
          "reference": {
            "type": "string",
            "description": "Can be used to pass your own reference in the request for tracking purposes."
          },
          "custom": {
            "type": "string",
            "description": "can be used to pass custom data in the request"
          }
        }
      },
      "VerificationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A id that can be used to query status of an verification",
            "example": "1234567876"
          },
          "SmsVerificationData": {
            "$ref": "#/components/schemas/SMSVerificationData"
          },
          "FlashCallVerificationData": {
            "$ref": "#/components/schemas/FlashcallVerificationData"
          },
          "CalloutVerificationData": {
            "$ref": "#/components/schemas/CalloutVerificationData"
          }
        }
      },
      "SMSVerificationData": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "example": "Your verfication code is {{CODE}}"
          }
        }
      },
      "FlashcallVerificationData": {
        "type": "object",
        "properties": {
          "cliFilter": {
            "type": "string",
            "description": "is the regexp filter that should be applied for incoming calls to intercept the flashcall",
            "example": "(.*)70123(.*)"
          },
          "interceptionTimeout": {
            "type": "integer",
            "description": "stop listening for incoming call after x seconds",
            "example": 120
          }
        }
      },
      "CalloutVerificationData": {
        "type": "object",
        "properties": {
          "startPollingAfter": {
            "type": "integer",
            "description": "use this value to determine when to start to ask for status of verification",
            "example": 10
          },
          "stopPollingAfter": {
            "type": "integer",
            "description": "use this value to determine when to stop to ask for status of verification",
            "example": 30
          },
          "pollingInterval": {
            "type": "integer",
            "description": "use this value to determine how often to check status of verification",
            "example": 3
          }
        }
      },
      "VerificationReport": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "description": "Indicates the verification method. Possible value are: flashCall or sms ",
            "default": "sms",
            "enum": ["flashCall", "sms"]
          },
          "cli": {
            "type": "string",
            "description": "The call you recieved on the phone",
            "example": "+15553241212"
          },
          "code": {
            "type": "string",
            "description": "The code in the sms"
          }
        }
      },
      "Identity": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "number",
            "enum": ["number", "username"]
          },
          "endpoint": {
            "type": "string",
            "description": "an e164 formated phonenumber with leading space",
            "example": "+15551234567"
          }
        }
      }
    },
    "securitySchemes": {
      "BasicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
